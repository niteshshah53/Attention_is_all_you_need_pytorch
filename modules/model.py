
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/Attention_Is_All_You_Need.ipynb

from torch import nn
import math, copy, time
import numpy as np
import torch
import torch.nn.functional as F
from torch.autograd import Variable
from pdb import set_trace



class EncoderDecoder(nn.Module):
    """
    A standard Encoder-Decoder architecture. Base for this and many
    other models.
    """

    def __init__(self, encoder,decoder, src_emb, tar_emb, generator):
        super(EncoderDecoder,self).__init__()

        # storing encode and decoder
        self.encoder, self.decoder = encoder, decoder

        # store source and target language embeddings
        self.src_emb, self.tar_emb = src_emb, tar_emb

        self.generator = generator

    def forward(self, src, tar, src_mask, tar_mask, dec_lens):
        "Take in and process masked src and target sequences."
        return self.decode(self.encode(src,src_mask),src_mask,tar,tar_mask), dec_lens
 
    def encode(self, src, src_mask):
        return self.encoder(self.src_emb(src), src_mask)

    def decode(self, memory, src_mask, tar, tar_mask):
        out = self.decoder(self.tar_emb(tar), memory,src_mask, tar_mask)
        return self.generator(out)



class Generator(nn.Module):

    "Define standard linear + softmax generation step."
    def __init__(self, d_model, vocab_size):
        super(Generator, self).__init__()
        self.proj = nn.Linear(d_model, vocab_size)

    def forward(self, x):
        return F.log_softmax(self.proj(x), dim=-1)


def clone(layer, n):
    return nn.ModuleList([copy.deepcopy(layer) for _ in range(n)])


class Encoder(nn.Module):

    def __init__(self, layer, n):
        super(Encoder,self).__init__()
        self.layers = clone(layer,n)
        self.norm = LayerNorm(layer.size)

    def forward(self, x, mask):
        
        for layer in self.layers: x = layer(x,mask)
        return self.norm(x)



class LayerNorm(nn.Module):
    def __init__(self, features, eps = 1e-6):
        super(LayerNorm,self).__init__()
        # weights and bias layer and nn.parameters to these layers
        self.a_2 = nn.Parameter(torch.ones(features))
        self.b_2 = nn.Parameter(torch.zeros(features))
        self.eps = eps

    def forward(self, x):
        
        mean = x.mean(-1, keepdim = True)
        std = x.std(-1, keepdim = True)
        return self.a_2*(x - mean)/(std + self.eps) + self.b_2


class SublayerConnection(nn.Module):
    """
    A residual connection followed by a layer norm.
    Note for code simplicity the norm is first as opposed to last.
    """
    def __init__(self, size, dropout):
        super(SublayerConnection, self).__init__()
        self.norm = LayerNorm(size)
        self.dropout = nn.Dropout(dropout)

    def forward(self, x, sublayer):
        
        "Apply residual connection to any sublayer with the same size."
        return x + self.dropout(sublayer(self.norm(x)))


class EncoderLayer(nn.Module):

    def __init__(self, size, self_attn, feed_forward, dropout):
        super(EncoderLayer, self).__init__()
        self.self_attn = self_attn
        self.feed_forward = feed_forward
        self.sublayer = clone(SublayerConnection(size, dropout), 2)
        self.size = size

    def forward(self, x, mask):
        
        x = self.sublayer[0](x, lambda x: self.self_attn(x, x, x, mask))
        return self.sublayer[1](x, self.feed_forward)



class Decoder(nn.Module):

    def __init__(self, layer, n):
        super(Decoder, self).__init__()
        self.layers = clone(layer, n)
        self.norm = LayerNorm(layer.size)

    def forward(self, x, memory, src_mask, tar_mask):
        
        for layer in self.layers: x = layer(x, memory, src_mask, tar_mask)
        return self.norm(x)


class DecoderLayer(nn.Module):

    def __init__(self, size, self_attn, src_attn, feed_forward, dropout):
        super(DecoderLayer,self).__init__()
        self.size = size
        self.self_attn = self_attn
        self.src_attn = src_attn
        self.feed_forward = feed_forward
        self.sublayer = clone(SublayerConnection(size, dropout),3)

    def forward(self, x, memory, src_mask, tar_mask):
        
        m = memory
        x = self.sublayer[0](x, lambda x: self.self_attn(x, x, x, tar_mask)) # Decoder masked multi-head attento
        x = self.sublayer[1](x, lambda x: self.src_attn(x, m, m, src_mask)) # multihead atten similar to Encoder's
        return self.sublayer[2](x, self.feed_forward)



def subsequent_mask(size):
    "Mask out subsequent positions."
    attn_shape = (1, size, size)
    subsequentmask = np.triu(np.ones(attn_shape), k=1).astype('uint8')
    return torch.from_numpy(subsequentmask) == 1


def attention(query, key, value, mask=None, dropout=None):

    d_k = query.size(-1)
    scores = torch.matmul(query, key.transpose(-2,-1)) / math.sqrt(d_k)
    
    if mask is not None: score = scores.masked_fill(mask == 0, -1e9) # applied on res_x_mask to mask padding
    p_attn = F.softmax(scores, dim = -1)

    if dropout: p_attn = dropout(p_attn)
    return torch.matmul(p_attn, value), p_attn


class MultiHeadedAttention(nn.Module):

    def __init__(self, h, d_model, dropout = 0.1):
        super(MultiHeadedAttention,self).__init__()
        assert d_model % h == 0

        self.d_k = d_model // h
        self.h = h
        self.linears = clone(nn.Linear(d_model,d_model), 4)
        self.attn = None
        self.dropout = nn.Dropout(p = dropout)

    def forward(self, query, key, value, mask=None):
        if mask is not None:
            mask = mask.unsqueeze(1)
        nbacthes = query.size(0)

        # Do all the linear projections in batch from d_model => h x d_k
        query, key, value = [l(x).view(nbacthes,-1,self.h,self.d_k).transpose(1,2)
                             for l, x in zip(self.linears, (query, key, value))]

        # Apply attention on all the projected vectors in batch.
        x, self.attn = attention(query, key, value, mask=mask, dropout = self.dropout)

        # "Concat" using a view and apply a final linear.
        x = x.transpose(1,2).contiguous().view(nbacthes, -1, self.h*self.d_k)
        return self.linears[-1](x)





class PositionwiseFeedForward(nn.Module):

    def __init__(self, d_model, d_ff, dropout = 0.1):
        super(PositionwiseFeedForward, self).__init__()
        self.w_1 = nn.Linear(d_model, d_ff)
        self.w_2 = nn.Linear(d_ff, d_model)
        self.dropout = nn.Dropout(dropout)

    def forward(self,x):
        
        return self.w_2(self.dropout(F.relu(self.w_1(x))))


class Embeddings(nn.Module):
    def __init__(self, d_model, vocab, Embedding):
        super(Embeddings, self).__init__()
        self.lut = nn.Embedding(vocab, d_model)
        if Embedding is not None: self.lut.weight.data = Embedding
        self.d_model = d_model

    def forward(self, x):
        # teacher forcing should come here
        return self.lut(x) * math.sqrt(self.d_model)


class PositionalEncoding(nn.Module):

    def __init__(self, d_model, dropout, max_len = 5000):
        super(PositionalEncoding, self).__init__()
        self.dropout = nn.Dropout(p = dropout)

        pe = torch.zeros(max_len, d_model)
        position = torch.arange(0, max_len).unsqueeze(1)
        div_term = torch.exp(torch.arange(0, d_model, 2) *
                             -(math.log(10000.0) / d_model))
        pe[:, 0::2] = torch.sin(position * div_term)
        pe[:, 1::2] = torch.cos(position * div_term)

        pe = pe.unsqueeze(0)

        # register pe as a buffer that should not to be considered a model parameter
        self.register_buffer('pe', pe)

    def forward(self, x):
        
        x = x + Variable(self.pe[:, :x.size(1)],requires_grad=False)
        return self.dropout(x)


def make_model(src_vocab, tar_vocab, N = 6, d_model = 512,
               d_ff = 2048, h = 8, dropout = 0.1, src_embedding = None, tar_embedding = None):

    c  = copy.deepcopy
    attn = MultiHeadedAttention(h, d_model)
    ff = PositionwiseFeedForward(d_model, d_ff, dropout)
    position = PositionalEncoding(d_model, dropout)
    model = EncoderDecoder(
        Encoder(EncoderLayer(d_model, c(attn), c(ff), dropout),N),
        Decoder(DecoderLayer(d_model, c(attn), c(attn), c(ff),
                             dropout), N),
        nn.Sequential(Embeddings(d_model, src_vocab,src_embedding), c(position)),
        nn.Sequential(Embeddings(d_model, tar_vocab,tar_embedding), c(position)),
        Generator(d_model, tar_vocab))


    for p in model.parameters():
        if p.dim() > 1:
            nn.init.xavier_uniform_(p)
    return model